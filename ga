using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using WF.ERMT.Application.Services.ActionLog;
using WF.ERMT.Application.Entities.CustomEntities;
using WF.ERMT.Application.Entities;
using System.Web.Mvc;
//using WF.ERMT.Application.DataEntities.DataEntities;

namespace WF.ERMT.Application.Web.CustomFiltersAttributes
{
    public class CustomActionLoggingFilter : ActionFilterAttribute, IActionFilter
    {
        #region Initialization
        public ActionLog _actionlogservice{get; set;}
        #endregion

        void IActionFilter.OnActionExecuting(ActionExecutingContext filterContext)
         {
             UserEntity userdetails = HttpContext.Current.Session["UserDetails"] as UserEntity;
            ActionLogEntity log = new ActionLogEntity()
            {
                Controller = filterContext.ActionDescriptor.ControllerDescriptor.ControllerName,
                Action = filterContext.ActionDescriptor.ActionName,
                //UserId = filterContext.HttpContext.Request.UserHostAddress,
                CreatedBy = userdetails.UserID.ToString(),
                 CreatedTS = Convert.ToDateTime(filterContext.HttpContext.Timestamp)
             };

             _actionlogservice.AddNew(log);

         }
    }
}
---
using System.Web;
using System.Web.Mvc;
using WF.ERMT.Application.Entities;
using WF.ERMT.Application.Core.Authorization;
using WF.ERMT.Application.Core.Authorization.Authorization;
using WF.ERMT.Application.Entities.CustomEntities;

namespace WF.ERMT.Application.Web.CustomFiltersAttributes.CustomFiltersAttributes
{
    public class CustomAuthorizationFilter: AuthorizeAttribute,IAuthorizationFilter
    {
        /// <summary>
        /// Get the user details and check if the user has access to the requested view.
        /// It will return true if user is authorized else it will return false
        /// </summary>
        protected override bool AuthorizeCore(HttpContextBase httpContext)
        {
            var session = HttpContext.Current.Session;
            UserEntity userdetails = session["UserDetails"] as UserEntity;
            CustomAuthorization c = new CustomAuthorization();
            string requestedView = HttpContext.Current.Request.RequestContext.RouteData.Values["Action"].ToString();
            if (HttpContext.Current.Session["SelectedRole"] != null)
            {
                string selectedrole = HttpContext.Current.Session["SelectedRole"].ToString();

                bool authorize = c.AuthorizeUsers(userdetails, requestedView, selectedrole);
                if (authorize == true)
                    return true;
                else
                    return false;
            }
            else
                return false;
            
        }

        /// <summary>
        /// Redirect the user to unauthorized page
        /// </summary>
        /// <param name="filterContext"></param>
        protected override void HandleUnauthorizedRequest(AuthorizationContext filterContext)
        {
            filterContext.Result = new RedirectResult("~/Error/UnauthorizedError");
        }

        /// <summary>
        /// Perform the appropriate operation on authorization of the user
        /// </summary>
        /// <param name="filterContext"></param>
        public override void OnAuthorization(AuthorizationContext filterContext)
        {
            if (filterContext.ActionDescriptor.IsDefined(typeof(AllowAnonymousAttribute), true)
               || filterContext.ActionDescriptor.ControllerDescriptor.IsDefined(typeof(AllowAnonymousAttribute), true))
            {
                return;
            }

            else if (this.AuthorizeCore(filterContext.HttpContext))
            {
                base.OnAuthorization(filterContext);
            }

            else
            {
                this.HandleUnauthorizedRequest(filterContext);
            }
        }

    }
}
--
using System;
using System.Web;
using System.Web.Mvc;
using WF.ERMT.Application.Web;

namespace WF.ERMT.Application.Web.CustomFiltersAttributes.CustomFiltersAttributes
{
    public class ErrorHandlerAttribute:HandleErrorAttribute 
    {
        public override void OnException(ExceptionContext filterContext)
        {
            if (filterContext.ExceptionHandled || !filterContext.HttpContext.IsCustomErrorEnabled)
            {
                return;
            }

            if (new HttpException(null, filterContext.Exception).GetHttpCode() != 500)
            {
                return;
            }

            if (!ExceptionType.IsInstanceOfType(filterContext.Exception))
            {
                return;
            }

            // if the request is AJAX return JSON else view.
            if (filterContext.HttpContext.Request.Headers["X-Requested-With"] == "XMLHttpRequest")
            {
                filterContext.Result = new JsonResult
                {
                    JsonRequestBehavior = JsonRequestBehavior.AllowGet,
                    Data = new
                    {
                        error = true,
                        message = filterContext.Exception.Message
                    }
                };
            }
            else
            {
                var controllerName = (string)filterContext.RouteData.Values["controller"];
                var actionName = (string)filterContext.RouteData.Values["action"];
                var model = new HandleErrorInfo(filterContext.Exception, controllerName, actionName);

                filterContext.Result = new ViewResult
                {
                    ViewName = View,
                    MasterName = Master,
                    ViewData = new ViewDataDictionary<HandleErrorInfo>(model),
                    TempData = filterContext.Controller.TempData
                };
            }

            
            Exception ex = filterContext.Exception;
            MvcApplication.logger.LogError(ex);   
            filterContext.ExceptionHandled = true;

            //ILogger logger = new Logger(filterContext.Controller.GetType());
           // logger.LogException(ex.Message, ex);

　
            //LoggerUtil EntLiblogger = LoggerUtil.Instance(Convert.ToInt32(ConfigSettings.GetAppSetting("ApplicationID")), ConfigSettings.GetAppSetting("CONNECTION_STRING"));

            //EntLiblogger.LogError(ex.Message, ex);

            //var model = new HandleErrorInfo(filterContext.Exception, "Error", "OnError");

            //filterContext.Result = new ViewResult()
            //{
            //    ViewData = new ViewDataDictionary(model)
            //};
        } 

        
    }
}---
----
using Autofac;
using Autofac.Integration.Mvc;
using System.Web.Mvc;
using System.Reflection;
using System;
using System.ServiceModel;
using Autofac.Integration.Wcf;
using WF.ERMT.Application.Services.UserDetails;
//using WF.ERMT.Application.AppServices.ENCSvc;
using CommonMasterData;
using WF.ERMT.Application.Services.ActionLog;
using WF.ERMT.Application.Web.CustomFiltersAttributes;
using System.Web.Compilation;

　
　
　
namespace WF.ERMT.Application.Web.App_Start
{
    public static class Bootstrapper
    {
        public static void Run()
        {
            SetAutofacContainer();
        }

        private static void SetAutofacContainer()
        {
            var builder = new ContainerBuilder();
            builder.RegisterControllers(AppDomain.CurrentDomain.GetAssemblies());
            builder.RegisterFilterProvider();
            BuildManager.GetReferencedAssemblies();
            //  Register DataAccess assembly
            builder.RegisterAssemblyTypes(AppDomain.CurrentDomain.GetAssemblies())
               .Where(t => /*t.Name.EndsWith("Business") ||*/ t.Name.EndsWith("UnitOfWork") || t.Name.EndsWith("DataAccess"))
               .AsImplementedInterfaces().InstancePerHttpRequest();

            builder.RegisterAssemblyTypes(AppDomain.CurrentDomain.GetAssemblies())
                .Where(t => t.Name.EndsWith("DataAccess") || t.Name.EndsWith("UnitOfWork") || t.Name.EndsWith("DbFactory"))
                .AsImplementedInterfaces().InstancePerHttpRequest();

            //  Register DataAccess assembly

　
            //builder.RegisterType<"CustomActionLoggingFilter">().PropertiesAutowired();

　
            // Register Service assembly
            builder.RegisterAssemblyTypes(Assembly.Load("WF.ERMT.Application.DataAccess"))
            //.Where(t => t.Name.EndsWith("DataAccess"))
            .AsImplementedInterfaces().InstancePerHttpRequest();

            builder.RegisterAssemblyTypes(Assembly.Load("WF.ERMT.Application.Business"))
            // .Where(t => t.Name.EndsWith("Business"))
            .AsImplementedInterfaces().InstancePerHttpRequest();

         

            builder.RegisterAssemblyTypes(Assembly.Load("WF.ERMT.Application.Core.Interfaces"))
            .Where(t => t.Name.EndsWith("Business") || t.Name.EndsWith("DataAccess"))
           .AsImplementedInterfaces().InstancePerHttpRequest();

            builder.RegisterAssemblyTypes(Assembly.Load("WF.ERMT.Application.DataEntities"))
            //.Where(t => t.Name.EndsWith("Business") || t.Name.EndsWith("DataAccess"))
           .AsImplementedInterfaces().InstancePerHttpRequest();

            builder.RegisterAssemblyTypes(Assembly.Load("WF.ERMT.Application.CustomEntities"))
          //.Where(t => t.Name.EndsWith("Business") || t.Name.EndsWith("DataAccess"))
          .AsImplementedInterfaces().InstancePerHttpRequest();

　
　
　
            builder.RegisterType<UserDetails>();
            builder.RegisterType<MasterData>();
         
            builder.RegisterType<ActionLog>();

           
            var host = new ServiceHost(typeof(UserDetails));
            //var hostenc = new ServiceHost(typeof(ENCSvc));
            var actionloghost = new ServiceHost(typeof(ActionLog));
            var hostmasterdata = new ServiceHost(typeof(MasterData));

            WSHttpBinding binding = new WSHttpBinding();
            WSHttpBinding commonmasterdatabinding = new WSHttpBinding();
            WSHttpBinding pepbinding = new WSHttpBinding();
            WSHttpBinding actionlogbinding = new WSHttpBinding();

            host.AddServiceEndpoint(typeof(IUserDetails), binding, "http://localhost:8733/Design_Time_Addresses/WF.ERMT.Application.Services.UserDetails/UserDetails/");
          //  hostpep.AddServiceEndpoint(typeof(IPEPDetails), pepbinding, "http://localhost:8733/Design_Time_Addresses/WF.ERMT.Application.Services.PEPDetails/PEPDetails/");
            actionloghost.AddServiceEndpoint(typeof(IActionLog), actionlogbinding, "http://localhost:8733/Design_Time_Addresses/WF.ERMT.Application.Services.ActionLog/ActionLog/");
            hostmasterdata.AddServiceEndpoint(typeof(IMasterData), commonmasterdatabinding, "http://localhost:8733/Design_Time_Addresses/CommonMasterData/MasterData/");

　
            IContainer container = builder.Build();

            //hostenc.AddDependencyInjectionBehavior<ENCSvc>(container);
           // hostpep.AddDependencyInjectionBehavior<PEPDetails>(container);
            host.AddDependencyInjectionBehavior<UserDetails>(container);
            actionloghost.AddDependencyInjectionBehavior<ActionLog>(container);
            hostmasterdata.AddDependencyInjectionBehavior<MasterData>(container);

            DependencyResolver.SetResolver(new AutofacDependencyResolver(container));
        }
    }
}
--
using System;
using System.Web.Optimization;

　
namespace WF.ERMT.Application.Web.App_Start
{
    public class BundleConfig
    {
        public static void RegisterBundles(BundleCollection bundles)
        {
            bundles.Add(new ScriptBundle("~/bundles/script")
                .Include(
                        "~/Contents/Scripts/jquery-1.11.1.min.js",
                        "~/Contents/Scripts/bootstrap.min.js",
                        "~/Contents/Scripts/jquery-ui.js",
                        "~/Contents/Scripts/jquery.unobtrusive-ajax.min.js"
                        ));
          
            bundles.Add(new StyleBundle("~/bundles/css")
                .Include(
                        "~/Contents/Styles/Style.css",
                        "~/Contents/Styles/bootstrap.min.css",
                        "~/Contents/Styles/jquery-ui.css"
                        ));

            bundles.Add(new ScriptBundle("~/bundles/scriptadminlte")
                .Include(
                "~/AdminLTE/plugins/datatables/js/jquery.dataTables.min.js",
                "~/AdminLTE/plugins/datatables/js/dataTables.bootstrap.min.js"
                ));

            bundles.Add(new StyleBundle("~/bundles/cssadminlte")
               .Include(
               "~/AdminLTE/plugins/font-awesome/css/font-awesome.min.css",
               "~/AdminLTE/plugins/ionicons/css/ionicons.css",
               //"~/AdminLTE/bootstrap/css/bootstrap.min.css",
               "~/AdminLTE/dist/css/admin-lte.min.css",
               "~/AdminLTE/dist/css/skins/_all-skins.min.css"
               ));

　
        }
        --
        using System.Web.Mvc;

using WF.ERMT.Application.Web.CustomFiltersAttributes.CustomFiltersAttributes;


namespace WF.ERMT.Application.Web

{

    public class FilterConfig

    {

        public static void RegisterGlobalFilters(GlobalFilterCollection filters)

        {

            filters.Add(new HandleErrorAttribute());

            filters.Add(new ErrorHandlerAttribute());

            filters.Add(new CustomAuthorizationFilter());

        }
        --
        using System;

using System.Collections.Generic;

using System.Linq;

using System.Text;

using System.Threading.Tasks;

using System.Web;

using WF.ERMT.Application.Configurations.CommonConfig.Configurations;

using WF.ERMT.Application.Core.Logging.EntLibLogging.Logger;


namespace WF.ERMT.Application.Web.App_Start

{

    public static class LoggerConfig

    {

        public static LoggerUtil Bind()

        {

            

            return LoggerUtil.Instance(Convert.ToInt32(ConfigSettings.GetAppSetting("ApplicationID")), ConfigSettings.GetAppSetting("CONNECTION_STRING"));

        }
        --
        
        


    }

}

    }

}
    }
}
